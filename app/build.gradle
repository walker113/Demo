apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'


android {
    compileSdkVersion defCompileSdkVersionTwentyEight.toInteger()
    defaultConfig {
        applicationId "stay.walker.com.retrofitdemo"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        exclude 'META-INF/proguard/androidx-annotations.pro'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    implementation 'com.android.support:design:28.0.0'
    implementation rootProject.ext.android.defExtSupportAppcompat
    implementation 'com.android.support.constraint:constraint-layout:1.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'


    /*网络请求框架*/
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.8.0'

    implementation 'com.github.zhaokaiqiang.klog:library:1.6.0'


    implementation "android.arch.work:work-runtime-ktx:1.0.0-alpha09"


    implementation 'com.dlazaro66.qrcodereaderview:qrcodereaderview:2.0.3'
    implementation 'com.blankj:utilcode:1.22.0'


    implementation 'com.just.agentweb:agentweb:4.0.2' // (必选)
    implementation 'com.just.agentweb:download:4.0.2' // (可选)
    implementation 'com.just.agentweb:filechooser:4.0.2'// (可选)

    /*RxLifecycle基础库*/
    implementation 'com.trello.rxlifecycle2:rxlifecycle:2.1.0'
    implementation 'com.trello.rxlifecycle2:rxlifecycle-components:2.1.0'

    implementation 'com.jakewharton:butterknife:8.8.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'

    implementation 'org.greenrobot:eventbus:3.0.0'
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.30'

    implementation 'q.rorbin:badgeview:1.1.3'
}


task apkcopy {
    println 'doLast'
    // doLast可以保证闭包的执行是在gradle的执行阶段，而不是配置阶段
    doLast {
        println 'doLast'

        def srcPath = this.buildDir.path + '/outputs/apk'
        def destPath = 'E:\\pdf\\apk'

        def command = "mv -f ${srcPath} ${destPath}"
        // Executes an external command.
        exec {
            try {
                // 定义执行命令类型
                executable 'bash'
                args '-c', command
                println 'the common execute success'
            } catch (Exception e) {
                println "${command} the commond is failed"
            }
        }
    }
}

// 使用task容器创建, this.tasks返回的是task容器 - TaskContainer
this.tasks.create(name: 'taskContainercreateTask') {
    println '----------taskContainercreateTask'
}

// task依赖详解
task taskDependencyX {
    doLast {
        println "taskDependency---X"
    }
}
task taskDependencyY {
    doLast {
        println "taskDependency---Y"
    }
}
// 添加X、Y依赖
task taskDependencyZ(dependsOn: [taskDependencyY, taskDependencyX]) {
    doLast {
        println "taskDependency---Z"
    }
}

// << 等同于 doLast
task lib1 << {
    println 'lib---1'
}
task lib2 << {
    println 'lib---2'
}
task nolib << {
    println 'nolib'
}
// 定义一个task ，要依赖所有以lib开头的task
task dynamicDependsTask() {
    // 通过TaskContainer查找所有以lib开通的task
    dependsOn this.tasks.findAll { Task task ->
        return task.name.startsWith('lib')
    }
}


//